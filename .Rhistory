names(GCMlasso_obj)
compare_group(GCMlasso_obj,grp1=1:2,grp2=3:4,var = 1:15)
compare_group(GCMlasso_obj,grp1=1:2,grp2=3:4,var = 1:15)
compare_group(GCMlasso_obj=GCMlasso_obj,grp1=1:2,grp2=3:4,var = 1:15)
?compare_group
library(Test)
names(GCMlasso_obj)
compare_group(GCMlasso_obj,grp1=1:2,grp2=3:4,var = 1:15)
library(Test)
names(GCMlasso_obj)
compare_group(GCMlasso_obj,grp1=1:2,grp2=3:4,var = 1:15)
?plot_graph
plot_graph(GCMlasso_obj,var=1:15,edge_perc = 0.6)
?reg_coef
reg_coef(GCMlasso_obj, var_pred=1:14, var_response = 15)
?Test::predict
reg_coef(GCMlasso_obj, var_pred=1:14, var_response = 15)
predict_val<-predict(GCMlasso_obj,var_response=15,var_group=16)
library(Test)
predict_val<-predict(GCMlasso_obj,var_response=15,var_group=16,rep_sample=20)
predict_val_new<-predict_val[is.na(GCMlasso_obj$data_ordered[,var_response])]
predict_val_new<-predict_val[is.na(GCMlasso_obj$data_ordered[,15])]
hist(predict_val_new)
names(Data)
names(Framingham)
predict_val_new<-predict_val[is.na(GCMlasso_obj$data_ordered[,"TenYearCHD"])]
names(Data)
hist(predict_val_new)
setwd("C:/Users/wan294/Dropbox/PLS/Rcode")
setwd("C:/Users/wan294/Dropbox/PLS/Rcode")
source("clusterpls_functions.r",local=TRUE)
library(mvtnorm)
library(Matrix)
library(MBESS)
library(hsdar)
library(pdfCluster)
library(pls)
library(ppls)
library(gglasso)
library(pracma)
library(plyr)
library(spls)
library(corrplot)
library(MSGLasso)
library(glmnet)
library(ggplot2)
library(reshape2)
library(gridExtra)
m=100
results.update=matrix(NA,nrow=m,ncol=4)
grpcoefols=list()
grpcoeflas=list()
for(i in 1:m){
##setup parameters###
n=100 ##number of observations
p=50  ##number of X variables in each cluster
np=10  ##number of cluster
pc=1  ##number of latent comp
set.seed(i+100)
##no. of clusters##
nop=rep(p,np)
nopc=rep(pc,np)
eigenval=NULL
Xclu=NULL
Zclu=NULL
#set.seed(1)
# corM=NULL
# for(c in 1:length(nopc)){
#   corM[[c]]<-matrix(0,nopc[c],nopc[c])
#   for(i in 1:nopc[c]) {
#     for(j in 1:nopc[c]) {
#        corM[[c]][i,j]=0.1^(abs((i-j)))
#       #corM[[c]][i,j]<-0.8^(1-I(i==j))
#     }}
# }
gpindex=rep(1:np,each=pc)
##c is no. of clusters##
for(c in 1:length(nopc)){
#eigenval[[c]]=diag(c(abs(rnorm(nopc[c],100,1))))
eigenval[[c]]=abs(rnorm(nopc[c],10,1))
eigenvec=randortho(nop[c],type ="orthonormal")
Z=mvrnorm(n, rep(0,nopc[c]), diag(nopc[c]))%*%sqrt(eigenval[[c]])
noise=matrix(rnorm(prod(n,nop[c]),0,0.2), nrow = n)
Xnew=Z%*%t(eigenvec[,1:nopc[c]])+noise
Xclu=cbind(Xclu,Xnew)
Zclu=cbind(Zclu,Z)
}
##number of responses
q=3
beta=cbind(rep(c(1,3,0,0,0,0,0,0,0,0),np/10),rep(c(1,0,3,0,0,0,0,0,0,0),np/10),rep(c(1,0,0,3,0,0,0,0,0,0),np/10))
#beta<-mvrnorm(sum(nopc), rep(0,q), diag(q))
#beta=normalize.vector(beta)
#Zclu=scale(Zclu,scale=TRUE, center=TRUE)
y=Zclu%*%beta+mvrnorm(n,rep(0,q),1*diag(q))
xtrain=Xclu[1:(n/2),]
xtest=Xclu[(n/2+1):n,]
ytrain=as.matrix(y[1:(n/2),])
ytest=as.matrix(y[(n/2+1):n,])
#corrplot(cor(xtrain[,161:200]))
trueindex=rep(1:np,each=p)
##find cluster index from initial clustering##
dismat=as.dist(1-abs(cor(xtrain)))
iniclu=hclust(dismat, method = "average")
#plot(iniclu)
##choose number of clusters
#index=cutree(iniclu,h=iniclu$height[which.max(diff(iniclu$height))])
index1=cutree(iniclu,k=1)
index=trueindex
#calculate the rand index
rand.ini=adj.rand.index(trueindex, index)
ncomp=20
Pen_L=matrix(1,nrow=5,ncol=5)
Pen_G=matrix(1,nrow=5,ncol=5)
results=clusterpls(xtrain,ytrain,xtest,ytest,index,ncomp)
results.update[i,1:4]=results$MSPE
#grpcoefols[[i]]=groupcoef(results$coefols,results$compno,gpindex)
grpcoeflas[[i]]=groupcoef(results$coeflas,results$compno,gpindex)
}
colnames(results.update)=c("groupols","nogroupols","nogrouppls","grouplas")
apply(results.update,2,mean)
?boxplot
betas=groupcoef(beta,gpindex,gpindex)
rownames(betas)=1:dim(betas)[1]
#coefols=lapply(grpcoefols,2,mean)
coeflas=apply(simplify2array(grpcoeflas), 1:2, mean)
rownames(coeflas)=1:dim(coeflas)[1]
betas=melt(betas)
colnames(betas)=c("Group","Response","Frequency")
betas$Group=as.factor(betas$Group)
betas$Group=with(betas, factor(betas$Group,levels=rev(levels(betas$Group))))
betas$Response=as.factor(betas$Response)
coeflas=melt(coeflas)
colnames(coeflas)=c("Group","Response","Frequency")
coeflas$Group=as.factor(coeflas$Group)
coeflas$Group=with(coeflas,factor(coeflas$Group,levels=rev(levels(coeflas$Group))))
coeflas$Response=as.factor(coeflas$Response)
p1 <-ggplot(betas, aes(Response, Group)) +
geom_tile(aes(fill = Frequency), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")+
scale_x_discrete(position = "top")+
coord_fixed(ratio = 0.8)+
theme_bw()
p2 <-ggplot(coeflas, aes(Response, Group)) +
geom_tile(aes(fill = Frequency), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")+
scale_x_discrete(position = "top")+
coord_fixed(ratio = 0.8)+
theme_bw()
grid.arrange(p1, p2, nrow = 1)
beta
dim( Xnew)
dim(Xclu)
betas
coeflas
beta
library(Test)
data("Framingham")
head(Framingham)
head(Framingham)
?GCMlasso
GCMlasso_obj<-GCMlasso(data=data,var_ord=1:15,var_group=16,
nsamp=200,odens=1,nwarm=50,seed=1,s=1e-2,t=1e-2,verb=TRUE)
getwd()
library(Test)
?GCMlasso
library(Test)
?GCMlasso
library(Test)
?GCMlasso
library(Test)
?GCMlasso
library(Test)
?GCMlasso
library(Test)
?GCMlasso
library(GCMlasso)
?GCMlasso
?GCMlasso
library(GCMlasso)
?GCMlasso
library(GCMlasso)
?GCMlasso
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.packages(c("animation", "ape", "broom", "CCA", "dplyr"))
install.packages(c( "fields", "FRK",
"grid", "gridExtra", "gstat", "IDE", "lattice", "leaps", "lmtest", "mgcv",
"nlme", "purrr", "RColorBrewer", "sp", "spacetime", "SpatioTemporal"))
install.packages(c("fields", "FRK", "grid", "gridExtra", "gstat", "IDE", "lattice", "leaps", "lmtest", "mgcv", "nlme", "purrr", "RColorBrewer", "sp", "spacetime", "SpatioTemporal"))
install.packages(c("fields", "FRK", "grid", "gridExtra", "gstat", "IDE", "lattice", "leaps", "lmtest", "mgcv", "nlme", "purrr", "RColorBrewer", "sp", "spacetime", "SpatioTemporal"))
install.packages(c("fields", "FRK", "grid", "gridExtra", "gstat", "IDE", "lattice", "leaps", "lmtest", "mgcv", "nlme", "purrr", "RColorBrewer", "sp", "spacetime", "SpatioTemporal"))
install.packages("FRK")
install.packages(C("grid", "gridExtra", "gstat", "IDE", "lattice", "leaps"))
install.packages(C("grid", "gridExtra", "gstat", "IDE", "lattice", "leaps"))
install.packages("GRID")
install.packages("grid")
install.packages("gstat")
install.packages("gstat")
install.packages("lattice")
install.packages("leaps")
install.packages(C("nlme", "purrr", "RColorBrewer", "sp", "spacetime", "SpatioTemporal"))
install.packages("nlme")
install.packages("purrr")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("sp")
install.packages("spacetime")
install.packages("SpatioTemporal")
library("dplyr")
library("dplyr")
## Wikle, C. K., Zammit-Mangion, A., and Cressie, N. (2019),
## Spatio-Temporal Statistics with R, Boca Raton, FL: Chapman & Hall/CRC
## Copyright (c) 2019 Wikle, Zammit-Mangion, Cressie
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
library("dplyr")
library("tidyr")
library("STRbook")
## ------------------------------------------------------------------------
locs <- read.table(system.file("extdata", "Stationinfo.dat",
package = "STRbook"),
col.names = c("id", "lat", "lon"))
Times <- read.table(system.file("extdata", "Times_1990.dat",
package = "STRbook"),
col.names = c("julian", "year", "month", "day"))
Tmax <- read.table(system.file("extdata", "Tmax_1990.dat",
package = "STRbook"))
## ------------------------------------------------------------------------
names(Tmax) <- locs$id
## ------------------------------------------------------------------------
Tmax <- cbind(Times, Tmax)
head(names(Tmax), 10)
## ------------------------------------------------------------------------
Tmax_long <- gather(Tmax, id, z, -julian, -year, -month, -day)
head(Tmax_long)
## ------------------------------------------------------------------------
Tmax_long$id <- as.integer(Tmax_long$id)
## -----------------------------------------------------------
nrow(Tmax_long)
Tmax_long <- filter(Tmax_long, !(z <= -9998))
nrow(Tmax_long)
## ------------------------------------------------------------------------
Tmax_long <- mutate(Tmax_long, proc = "Tmax")
head(Tmax_long)
## ------------------------------------------------------------------------
data(Tmin_long, package = "STRbook")
data(TDP_long, package = "STRbook")
data(Precip_long, package = "STRbook")
## ------------------------------------------------------------------------
NOAA_df_1990 <- rbind(Tmax_long, Tmin_long, TDP_long, Precip_long)
## ------------------------------------------------------------------------
summ <- group_by(NOAA_df_1990, year, proc) %>%  # groupings
summarise(mean_proc = mean(z))          # operation
head(summ)
## ------------------------------------------------------------------------
NOAA_precip <- filter(NOAA_df_1990, proc == "Precip" & month == 6)
summ <- group_by(NOAA_precip, year, id) %>%
summarise(days_no_precip = sum(z == 0))
head(summ)
## ------------------------------------------------------------------------
median(summ$days_no_precip)
## -------------------------------------------------------------
grps <- group_by(NOAA_precip, year, id)
summ <- summarise(grps, days_no_precip = sum(z == 0))
## ------------------------------------------------------------------------
NOAA_df_sorted <- arrange(NOAA_df_1990, julian, id)
## ------------------------------------------------------------------------
df1 <- select(NOAA_df_1990, julian, z)
df2 <- select(NOAA_df_1990, -julian)
## ------------------------------------------------------------------------
NOAA_df_1990 <- left_join(NOAA_df_1990, locs, by = "id")
## ------------------------------------------------------------------------
Tmax_long_sel <- select(Tmax_long, julian, id, z)
Tmax_wide <- spread(Tmax_long_sel, id, z)
dim(Tmax_wide)
## ------------------------------------------------------------------------
M <- select(Tmax_wide, -julian) %>% as.matrix()
## -----------------------------------------------------------
library("sp")
library("spacetime")
## ------------------------------------------------------------------------
NOAA_df_1990$date <- with(NOAA_df_1990,
paste(year, month, day, sep = "-"))
head(NOAA_df_1990$date, 4)   # show first four elements
## ------------------------------------------------------------------------
NOAA_df_1990$date <- as.Date(NOAA_df_1990$date)
class(NOAA_df_1990$date)
## ------------------------------------------------------------------------
Tmax_long2 <- filter(NOAA_df_1990, proc == "Tmax")
STObj <- stConstruct(x = Tmax_long2,           # data set
space = c("lon", "lat"),  # spatial fields
time = "date")            # time field
class(STObj)
## ------------------------------------------------------------------------
spat_part <- SpatialPoints(coords = Tmax_long2[, c("lon", "lat")])
temp_part <- Tmax_long2$date
STObj2 <- STIDF(sp = spat_part,
time = temp_part,
data = select(Tmax_long2, -date, -lon, -lat))
class(STObj2)
## ------------------------------------------------------------------------
spat_part <- SpatialPoints(coords = locs[, c("lon", "lat")])
temp_part <- with(Times,
paste(year, month, day, sep = "-"))
temp_part <- as.Date(temp_part)
## ------------------------------------------------------------------------
Tmax_long3 <- gather(Tmax, id, z, -julian, -year, -month, -day)
## ------------------------------------------------------------------------
Tmax_long3$id <- as.integer(Tmax_long3$id)
Tmax_long3 <- arrange(Tmax_long3,julian,id)
## ------------------------------------------------------------------------
all(unique(Tmax_long3$id) == locs$id)
## ------------------------------------------------------------------------
STObj3 <- STFDF(sp = spat_part,
time = temp_part,
data = Tmax_long3)
class(STObj3)
## ------------------------------------------------------------------------
proj4string(STObj3) <- CRS("+proj=longlat +ellps=WGS84")
## ------------------------------------------------------------------------
STObj3$z[STObj3$z == -9999] <- NA
library(devtools)
install_github('andrewzm/STRbook')
install_github('andrewzm/STRbook')
library("STRbook")
install_github('andrewzm/STRbook')
remove.packages("digest")
library(devtools)
install_github('andrewzm/STRbook')
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
install_github('andrewzm/STRbook')
library("dplyr")
library("tidyr")
library("STRbook")
locs <- read.table(system.file("extdata", "Stationinfo.dat",
package = "STRbook"),
col.names = c("id", "lat", "lon"))
## Wikle, C. K., Zammit-Mangion, A., and Cressie, N. (2019),
## Spatio-Temporal Statistics with R, Boca Raton, FL: Chapman & Hall/CRC
## Copyright (c) 2019 Wikle, Zammit-Mangion, Cressie
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
library("dplyr")
library("tidyr")
library("STRbook")
## ------------------------------------------------------------------------
locs <- read.table(system.file("extdata", "Stationinfo.dat",
package = "STRbook"),
col.names = c("id", "lat", "lon"))
Times <- read.table(system.file("extdata", "Times_1990.dat",
package = "STRbook"),
col.names = c("julian", "year", "month", "day"))
Tmax <- read.table(system.file("extdata", "Tmax_1990.dat",
package = "STRbook"))
## ------------------------------------------------------------------------
names(Tmax) <- locs$id
## ------------------------------------------------------------------------
Tmax <- cbind(Times, Tmax)
head(names(Tmax), 10)
## ------------------------------------------------------------------------
Tmax_long <- gather(Tmax, id, z, -julian, -year, -month, -day)
head(Tmax_long)
## ------------------------------------------------------------------------
Tmax_long$id <- as.integer(Tmax_long$id)
## -----------------------------------------------------------
nrow(Tmax_long)
Tmax_long <- filter(Tmax_long, !(z <= -9998))
nrow(Tmax_long)
## ------------------------------------------------------------------------
Tmax_long <- mutate(Tmax_long, proc = "Tmax")
head(Tmax_long)
## ------------------------------------------------------------------------
data(Tmin_long, package = "STRbook")
data(TDP_long, package = "STRbook")
data(Precip_long, package = "STRbook")
## ------------------------------------------------------------------------
NOAA_df_1990 <- rbind(Tmax_long, Tmin_long, TDP_long, Precip_long)
## ------------------------------------------------------------------------
summ <- group_by(NOAA_df_1990, year, proc) %>%  # groupings
summarise(mean_proc = mean(z))          # operation
head(summ)
## ------------------------------------------------------------------------
NOAA_precip <- filter(NOAA_df_1990, proc == "Precip" & month == 6)
summ <- group_by(NOAA_precip, year, id) %>%
summarise(days_no_precip = sum(z == 0))
head(summ)
## ------------------------------------------------------------------------
median(summ$days_no_precip)
## -------------------------------------------------------------
grps <- group_by(NOAA_precip, year, id)
summ <- summarise(grps, days_no_precip = sum(z == 0))
## ------------------------------------------------------------------------
NOAA_df_sorted <- arrange(NOAA_df_1990, julian, id)
## ------------------------------------------------------------------------
df1 <- select(NOAA_df_1990, julian, z)
df2 <- select(NOAA_df_1990, -julian)
## ------------------------------------------------------------------------
NOAA_df_1990 <- left_join(NOAA_df_1990, locs, by = "id")
## ------------------------------------------------------------------------
Tmax_long_sel <- select(Tmax_long, julian, id, z)
Tmax_wide <- spread(Tmax_long_sel, id, z)
dim(Tmax_wide)
## ------------------------------------------------------------------------
M <- select(Tmax_wide, -julian) %>% as.matrix()
## -----------------------------------------------------------
library("sp")
library("spacetime")
## ------------------------------------------------------------------------
NOAA_df_1990$date <- with(NOAA_df_1990,
paste(year, month, day, sep = "-"))
head(NOAA_df_1990$date, 4)   # show first four elements
## ------------------------------------------------------------------------
NOAA_df_1990$date <- as.Date(NOAA_df_1990$date)
class(NOAA_df_1990$date)
## ------------------------------------------------------------------------
Tmax_long2 <- filter(NOAA_df_1990, proc == "Tmax")
STObj <- stConstruct(x = Tmax_long2,           # data set
space = c("lon", "lat"),  # spatial fields
time = "date")            # time field
class(STObj)
## ------------------------------------------------------------------------
spat_part <- SpatialPoints(coords = Tmax_long2[, c("lon", "lat")])
temp_part <- Tmax_long2$date
STObj2 <- STIDF(sp = spat_part,
time = temp_part,
data = select(Tmax_long2, -date, -lon, -lat))
class(STObj2)
## ------------------------------------------------------------------------
spat_part <- SpatialPoints(coords = locs[, c("lon", "lat")])
temp_part <- with(Times,
paste(year, month, day, sep = "-"))
temp_part <- as.Date(temp_part)
## ------------------------------------------------------------------------
Tmax_long3 <- gather(Tmax, id, z, -julian, -year, -month, -day)
## ------------------------------------------------------------------------
Tmax_long3$id <- as.integer(Tmax_long3$id)
Tmax_long3 <- arrange(Tmax_long3,julian,id)
## ------------------------------------------------------------------------
all(unique(Tmax_long3$id) == locs$id)
## ------------------------------------------------------------------------
STObj3 <- STFDF(sp = spat_part,
time = temp_part,
data = Tmax_long3)
class(STObj3)
## ------------------------------------------------------------------------
proj4string(STObj3) <- CRS("+proj=longlat +ellps=WGS84")
## ------------------------------------------------------------------------
STObj3$z[STObj3$z == -9999] <- NA
library(GCMlasso)
data("Framingham")
head(Framingham)
GCMlasso_obj<-GCMlasso(data=Framingham,var_ord=1:15,var_group=16,
nsamp=2000,odens=1,nwarm=500,seed=1,s=1e-2,t=1e-2,verb=TRUE)
library(GCMlasso)
library(GCMlasso)
?GCMlasso
library(GCMlasso)
?GCMlasso
library(GCMlasso)
?GCMlasso
?compare_group
library(GCMlasso)
?compare_group
?plot_graph
?reg_coef
?predict
library(GCMlasso)
?GCMlasso
GCMlasso_obj<-GCMlasso(data=Framingham,var_ord=1:15,var_group=16,
nsamp=1000,odens=1,nwarm=500,seed=1,s=1e-2,t=1e-2,verb=TRUE)
compare_group(CMlasso_obj=CMlasso_obj,grp1=1:2,grp2=3:4,
var=1:15,credible_level=0.95)
compare_group(GCMlasso_obj=GCMlasso_obj,grp1=1:2,grp2=3:4,
var=1:15,credible_level=0.95)
plot_graph(GCMlasso_obj,var=1:15,edge_perc=0.6)
plot_graph(GCMlasso_obj,var=1:15,edge_perc=0.7)
plot_graph(GCMlasso_obj,var=1:15,edge_perc=0.65)
plot_graph(GCMlasso_obj,var=1:15,edge_perc=0.6)
plot_graph(GCMlasso_obj,var=1:15,edge_perc=0.65)
plot_graph(GCMlasso_obj,var=1:15,edge_perc=0.75)
?reg_coef
reg_coef(GCMlasso_obj,var_pred=1:14,var_response=15)
library(GCMlasso)
reg_coef(GCMlasso_obj,var_pred=1:14,var_response=15)
?predict
predict_val<-predict(GCMlasso_obj,var_response=15,var_group=16)
hist(predict_val)
predict_val_new<-predict_val[is.na(GCMlasso_obj$data_ordered[,var_response])]
predict_val_new<-predict_val[is.na(GCMlasso_obj$data_ordered[,15])]
hist(predict_val_new)
library(GCMlasso)
?Framingham
data("Framingham")
str(Framingham)
